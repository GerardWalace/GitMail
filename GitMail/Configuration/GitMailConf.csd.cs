//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GitMail.Configuration
{
    
    
    /// <summary>
    /// A collection of RepositoryConfiguration instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::GitMail.Configuration.RepositoryConfiguration), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::GitMail.Configuration.RepositoryCollection.RepositoryConfigurationPropertyName)]
    public partial class RepositoryCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string RepositoryConfigurationPropertyName = "configurationElement1";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::GitMail.Configuration.RepositoryCollection.RepositoryConfigurationPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::GitMail.Configuration.RepositoryCollection.RepositoryConfigurationPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::GitMail.Configuration.RepositoryConfiguration)(element)).DirectoryPath;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::GitMail.Configuration.RepositoryConfiguration"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::GitMail.Configuration.RepositoryConfiguration"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::GitMail.Configuration.RepositoryConfiguration();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.RepositoryConfiguration this[int index]
        {
            get
            {
                return ((global::GitMail.Configuration.RepositoryConfiguration)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="directoryPath">The key of the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.RepositoryConfiguration this[object directoryPath]
        {
            get
            {
                return ((global::GitMail.Configuration.RepositoryConfiguration)(base.BaseGet(directoryPath)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="configurationElement1">The <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::GitMail.Configuration.RepositoryConfiguration configurationElement1)
        {
            base.BaseAdd(configurationElement1);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="configurationElement1">The <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::GitMail.Configuration.RepositoryConfiguration configurationElement1)
        {
            base.BaseRemove(this.GetElementKey(configurationElement1));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.RepositoryConfiguration GetItemAt(int index)
        {
            return ((global::GitMail.Configuration.RepositoryConfiguration)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="directoryPath">The key of the <see cref="global::GitMail.Configuration.RepositoryConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.RepositoryConfiguration GetItemByKey(string directoryPath)
        {
            return ((global::GitMail.Configuration.RepositoryConfiguration)(base.BaseGet(((object)(directoryPath)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace GitMail.Configuration
{
    
    
    /// <summary>
    /// The GitMailConfiguration Configuration Section.
    /// </summary>
    public partial class GitMailConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the GitMailConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string GitMailConfigurationSectionName = "gitMailConfiguration";
        
        /// <summary>
        /// The XML path of the GitMailConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string GitMailConfigurationSectionPath = "gitMailConfiguration";
        
        /// <summary>
        /// Gets the GitMailConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::GitMail.Configuration.GitMailConfiguration Instance
        {
            get
            {
                return ((global::GitMail.Configuration.GitMailConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::GitMail.Configuration.GitMailConfiguration.GitMailConfigurationSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.GitMailConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.GitMailConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region GitPath Property
        /// <summary>
        /// The XML name of the <see cref="GitPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string GitPathPropertyName = "gitPath";
        
        /// <summary>
        /// Gets or sets the GitPath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The GitPath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.GitMailConfiguration.GitPathPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string GitPath
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.GitMailConfiguration.GitPathPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.GitMailConfiguration.GitPathPropertyName] = value;
            }
        }
        #endregion
        
        #region Repositories Property
        /// <summary>
        /// The XML name of the <see cref="Repositories"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string RepositoriesPropertyName = "repositories";
        
        /// <summary>
        /// Gets or sets the Repositories.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Repositories.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.GitMailConfiguration.RepositoriesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::GitMail.Configuration.RepositoryCollection Repositories
        {
            get
            {
                return ((global::GitMail.Configuration.RepositoryCollection)(base[global::GitMail.Configuration.GitMailConfiguration.RepositoriesPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.GitMailConfiguration.RepositoriesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace GitMail.Configuration
{
    
    
    /// <summary>
    /// The RepositoryConfiguration Configuration Element.
    /// </summary>
    public partial class RepositoryConfiguration : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region RepositoryPath Property
        /// <summary>
        /// The XML name of the <see cref="RepositoryPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string RepositoryPathPropertyName = "repositoryPath";
        
        /// <summary>
        /// Gets or sets the RepositoryPath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The RepositoryPath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.RepositoryConfiguration.RepositoryPathPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string RepositoryPath
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.RepositoryConfiguration.RepositoryPathPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.RepositoryConfiguration.RepositoryPathPropertyName] = value;
            }
        }
        #endregion
        
        #region DirectoryPath Property
        /// <summary>
        /// The XML name of the <see cref="DirectoryPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string DirectoryPathPropertyName = "directoryPath";
        
        /// <summary>
        /// Gets or sets the DirectoryPath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The DirectoryPath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.RepositoryConfiguration.DirectoryPathPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string DirectoryPath
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.RepositoryConfiguration.DirectoryPathPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.RepositoryConfiguration.DirectoryPathPropertyName] = value;
            }
        }
        #endregion
        
        #region Merges Property
        /// <summary>
        /// The XML name of the <see cref="Merges"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MergesPropertyName = "merges";
        
        /// <summary>
        /// Gets or sets the Merges.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Merges.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.RepositoryConfiguration.MergesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::GitMail.Configuration.MergeCollection Merges
        {
            get
            {
                return ((global::GitMail.Configuration.MergeCollection)(base[global::GitMail.Configuration.RepositoryConfiguration.MergesPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.RepositoryConfiguration.MergesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace GitMail.Configuration
{
    
    
    /// <summary>
    /// A collection of MergeConfiguration instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::GitMail.Configuration.MergeConfiguration), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::GitMail.Configuration.MergeCollection.MergeConfigurationPropertyName)]
    public partial class MergeCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::GitMail.Configuration.MergeConfiguration"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MergeConfigurationPropertyName = "configurationElement2";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::GitMail.Configuration.MergeCollection.MergeConfigurationPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::GitMail.Configuration.MergeCollection.MergeConfigurationPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::GitMail.Configuration.MergeConfiguration)(element)).MailObject;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::GitMail.Configuration.MergeConfiguration"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::GitMail.Configuration.MergeConfiguration"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::GitMail.Configuration.MergeConfiguration();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.MergeConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::GitMail.Configuration.MergeConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.MergeConfiguration this[int index]
        {
            get
            {
                return ((global::GitMail.Configuration.MergeConfiguration)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.MergeConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="mailObject">The key of the <see cref="global::GitMail.Configuration.MergeConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.MergeConfiguration this[object mailObject]
        {
            get
            {
                return ((global::GitMail.Configuration.MergeConfiguration)(base.BaseGet(mailObject)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::GitMail.Configuration.MergeConfiguration"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="configurationElement2">The <see cref="global::GitMail.Configuration.MergeConfiguration"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::GitMail.Configuration.MergeConfiguration configurationElement2)
        {
            base.BaseAdd(configurationElement2);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::GitMail.Configuration.MergeConfiguration"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="configurationElement2">The <see cref="global::GitMail.Configuration.MergeConfiguration"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::GitMail.Configuration.MergeConfiguration configurationElement2)
        {
            base.BaseRemove(this.GetElementKey(configurationElement2));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.MergeConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::GitMail.Configuration.MergeConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.MergeConfiguration GetItemAt(int index)
        {
            return ((global::GitMail.Configuration.MergeConfiguration)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::GitMail.Configuration.MergeConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="mailObject">The key of the <see cref="global::GitMail.Configuration.MergeConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::GitMail.Configuration.MergeConfiguration GetItemByKey(string mailObject)
        {
            return ((global::GitMail.Configuration.MergeConfiguration)(base.BaseGet(((object)(mailObject)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace GitMail.Configuration
{
    
    
    /// <summary>
    /// The MergeConfiguration Configuration Element.
    /// </summary>
    public partial class MergeConfiguration : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region IntoBranch Property
        /// <summary>
        /// The XML name of the <see cref="IntoBranch"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string IntoBranchPropertyName = "intoBranch";
        
        /// <summary>
        /// Gets or sets the IntoBranch.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The IntoBranch.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.MergeConfiguration.IntoBranchPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string IntoBranch
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.MergeConfiguration.IntoBranchPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.MergeConfiguration.IntoBranchPropertyName] = value;
            }
        }
        #endregion
        
        #region FromBranch Property
        /// <summary>
        /// The XML name of the <see cref="FromBranch"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string FromBranchPropertyName = "fromBranch";
        
        /// <summary>
        /// Gets or sets the FromBranch.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The FromBranch.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.MergeConfiguration.FromBranchPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string FromBranch
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.MergeConfiguration.FromBranchPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.MergeConfiguration.FromBranchPropertyName] = value;
            }
        }
        #endregion
        
        #region MailsDesReferents Property
        /// <summary>
        /// The XML name of the <see cref="MailsDesReferents"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MailsDesReferentsPropertyName = "mailsDesReferents";
        
        /// <summary>
        /// Gets or sets the MailsDesReferents.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The MailsDesReferents.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.MergeConfiguration.MailsDesReferentsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string MailsDesReferents
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.MergeConfiguration.MailsDesReferentsPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.MergeConfiguration.MailsDesReferentsPropertyName] = value;
            }
        }
        #endregion
        
        #region MailObject Property
        /// <summary>
        /// The XML name of the <see cref="MailObject"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MailObjectPropertyName = "mailObject";
        
        /// <summary>
        /// Gets or sets the MailObject.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The MailObject.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::GitMail.Configuration.MergeConfiguration.MailObjectPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string MailObject
        {
            get
            {
                return ((string)(base[global::GitMail.Configuration.MergeConfiguration.MailObjectPropertyName]));
            }
            set
            {
                base[global::GitMail.Configuration.MergeConfiguration.MailObjectPropertyName] = value;
            }
        }
        #endregion
    }
}
